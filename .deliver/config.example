#!/usr/bin/env bash

# PLEASE, ADD FOLLOWING LINES TO YOUR SSH CONFIG BEFORE START WORKING
# Host ec2
# Hostname ec2-[ip].compute.amazonaws.com
# User ec2-user
# IdentityFile ~/.ssh/ec2-key.pem

APP="ec2" # name of your release

GIT_CLEAN_PATHS="_build rel priv/generated priv/static"

BUILD_HOST="ec2" # host where to build the release
BUILD_USER="ec2-user" # local user at build host
BUILD_AT="/tmp/elixir/ec2/builds" # build directory on build host

STAGING_HOSTS="ec2" # staging / test hosts separated by space
STAGING_USER="ec2-user" # local user at staging hosts
# TEST_AT="/test/ec2" # deploy directory on staging hosts. default is DELIVER_TO

PRODUCTION_HOSTS="ec2" # deploy / production hosts separated by space
PRODUCTION_USER="ec2" # local user at deploy hosts
DELIVER_TO="/opt" # deploy directory on production hosts

# For *Phoenix* projects, symlink prod.secret.exs to our tmp source
pre_erlang_get_and_update_deps() {
  local _prod_secret_path="/home/deploy/prod.secret.exs"
  if [ "$TARGET_MIX_ENV" = "prod" ]; then
    __sync_remote "
      ln -sfn '$_prod_secret_path' '$BUILD_AT/config/prod.secret.exs'
    "
  fi
}

pre_erlang_clean_compile() {
  status "Running phoenix.digest" # log output prepended with "----->"
  __sync_remote " # runs the commands on the build host
    # [ -f ~/.profile ] && source ~/.profile # load profile (optional)
    source ~/.profile
    # echo \$PATH # check if rbenv is in the path
    set -e # fail if any command fails (recommended)
    cd '$BUILD_AT' # enter the build directory on the build host (required)
    # prepare something
    mkdir -p priv/static # required by the phoenix.digest task
    npm install
    npm install yarn

    ./node_modules/.bin/yarn install

    # run your custom task
    APP='$APP' MIX_ENV='$TARGET_MIX_ENV' $MIX_CMD phoenix.digest $SILENCE
  "
}

